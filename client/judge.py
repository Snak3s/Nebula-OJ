from selenium import webdriverimport sys, re, io, os, time, commandsinit_url = 'http://Address/judge/waiting/'query_url = 'http://Address/judge/waiting/'ret_url = 'http://Address/judge/pull/'login_url = 'http://Address/login/'init = 0driver = webdriver.Firefox()def Init() :	global init	driver.get(login_url)	element = driver.find_element_by_id("username");	element.send_keys('Admin Username');	element = driver.find_element_by_id("password");	element.send_keys('Admin Password');	driver.execute_script('login();');	init = 1sid = 0pid = 0tl = 0ml = 0src = ''lang = ''def Judge() :	driver.get('%s%s%s'%(ret_url, sid, '/7/'))	print ('%s%s'%("[ SYSTEM ] Judging : sid = ",sid))	print "[ START  ] Compiling"	if os.path.exists('./foo') :		os.remove('./foo')	if lang == 'C++' :		usrsrc = open('foo.cpp', 'w')		usrsrc.write('%s%s'%('#define __ONLINEJUDGE\n', src))		usrsrc.close()		bash = open('run.bash', 'w')		bash.write('ulimit -S -t 10 -v 131072 -d 131072 -m 131072\ng++ foo.cpp -o foo -w -lm')		bash.close()	if lang == 'C' :		usrsrc = open('foo.c', 'w')		usrsrc.write('%s%s'%('#define __ONLINEJUDGE\n', src))		usrsrc.close()		bash = open('run.bash', 'w')		bash.write('ulimit -S -t 10 -v 131072 -d 131072 -m 131072\ngcc foo.c -o foo -w -lm')		bash.close()	if lang == 'Pascal' :		usrsrc = open('foo.pas', 'w')		usrsrc.write(src)		usrsrc.close()		bash = open('run.bash', 'w')		bash.write('ulimit -S -t 10 -v 131072 -d 131072 -m 131072\nfpc foo.pas')		bash.close()	comp = commands.getoutput('bash ./run.bash')	print "[ FINISH ] Compiled"	if os.path.exists('./foo') == False :		driver.get('%s%s%s'%(ret_url, sid, '/6/'))		print "[ RETURN ] Compile Error"		return	if os.path.exists('%s%s'%(pid, '/data.conf')) == False :		driver.get('%s%s%s'%(ret_url, sid, '/5/'))		print "[ RETURN ] No Test Data"		return	print "[ START  ] Testing"	driver.get('%s%s%s'%(ret_url, sid, '/8/'))	conf = open('%s%s'%(pid, '/data.conf'), 'r')	st = conf.readline().strip('\n')	ed = conf.readline().strip('\n')	pre = conf.readline().strip('\n')	sufin = conf.readline().strip('\n')	sufout = conf.readline().strip('\n')	conf.close()	for i in range(int(st), int(ed)+1) :		print ("%s%d"%("[ START  ] Testing # ",i))		bash = open('run.bash', 'w')		bash.write('%s%d%s%d%s%d%s%d%s%s%s%s%s%d%s%s%s'%('ulimit -S -v ', int(ml)*1024, ' -d ', int(ml)*1024, ' -m ', int(ml)*1024, ' -t ', int(int(tl)/1000), ' -n 6\n', './foo < ', pid, '/', pre, i, '.', sufin, ' > temp.out'))		bash.close()		(status, comp) = commands.getstatusoutput('bash ./run.bash 2> status.out')		usrstatus = open('status.out', 'r')		st = usrstatus.readline().strip('\n')		if status == 38912 :			driver.get('%s%s%s'%(ret_url, sid, '/3/'))			print "[ RETURN ] Time Limit Exceeded"			return		if status != 0 :			driver.get('%s%s%s'%(ret_url, sid, '/10/'))			print "[ RETURN ] Runtime Error"			return		if os.path.exists('%s%s'%(pid, '/spj')) == False :			comp = commands.getoutput('%s%s%s%s%d%s%s%s'%('diff -BZ ', pid, '/', pre, i, '.', sufout, ' temp.out'))			if comp != '' :				driver.get('%s%s%s'%(ret_url, sid, '/2/'))				print "[ RETURN ] Wrong Answer"				return		else :			comp = commands.getoutput('%s%s%s%s%s%d%s%s%s%s%s%s%d%s%s'%(pid, '/spj ', pid, '/', pre, i, '.', sufin, ' temp.out ', pid, '/', pre, i, '.', sufout))			print ("%s%s"%("[ SYSTEM ] Special Judge Info : ",comp))			if comp[:2] != 'ok' :				driver.get('%s%s%s'%(ret_url, sid, '/2/'))				print "[ RETURN ] Wrong Answer"				return		print "[ FINISH ] Tested"	driver.get('%s%s%s'%(ret_url,sid,'/1/'))	print "[ RETURN ] Accepted"def Query() :	global sid, pid, tl, ml, src, lang, init	if init == 0 :		Init()	driver.get(query_url)	if len(driver.page_source) <= 40 :		return	if driver.page_source.find('502 Bad Gateway') != -1 :		return	sid = driver.find_element_by_id('sid').text	pid = driver.find_element_by_id('pid').text	tl = driver.find_element_by_id('timelimit').text	ml = driver.find_element_by_id('memorylimit').text	src = driver.find_element_by_id('program').text	lang = driver.find_element_by_id('lang').text	src = src.decode('base64','strict')	Judge()	Query()	returnwhile 1 :	Query()	time.sleep(3)driver.close()